[{"/Users/SY/ETH-NFT-game/nft-game-starter-project/src/index.js":"1","/Users/SY/ETH-NFT-game/nft-game-starter-project/src/App.js":"2","/Users/SY/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js":"3","/Users/SY/ETH-NFT-game/nft-game-starter-project/src/constants.js":"4","/Users/SY/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js":"5","/Users/SY/ETH-NFT-game/nft-game-starter-project/src/Components/LoadingIndicator/index.js":"6"},{"size":219,"mtime":1660714839716,"results":"7","hashOfConfig":"8"},{"size":7718,"mtime":1660780145553,"results":"9","hashOfConfig":"8"},{"size":5104,"mtime":1660780678138,"results":"10","hashOfConfig":"8"},{"size":621,"mtime":1660717073432,"results":"11","hashOfConfig":"8"},{"size":6263,"mtime":1660781034035,"results":"12","hashOfConfig":"8"},{"size":261,"mtime":1660714839714,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"wl89c7",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/SY/ETH-NFT-game/nft-game-starter-project/src/index.js",[],["29","30"],"/Users/SY/ETH-NFT-game/nft-game-starter-project/src/App.js",[],"/Users/SY/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js",["31","32"],"// SelectCharacter/index.js\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n// index.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n// index.js\n// SelectCharacter コンポーネントを定義しています。\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n  // index.js\n  // NFT キャラクターを Mint します。\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n    }\n  };\n  // ページがロードされた瞬間に下記を実行します。\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      // gameContract の状態を更新します。\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  // index.js\n  // index.js\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n\n        // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n\n        console.log(\"charactersTxn:\", charactersTxn);\n\n        // すべてのNFTキャラクターのデータを変換します。\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        // ミント可能なすべてのNFTキャラクターの状態を設定します。\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n\n    // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n      // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n      // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      // コンポーネントがマウントされたら、リスナーを停止する。\n\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  // index.js\n  // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n  const renderCharacters = () =>\n  characters.map((character, index) => (\n    <div className=\"character-item\" key={character.name}>\n      <div className=\"name-container\">\n        <p>{character.name}</p>\n      </div>\n      <img src={character.imageURI} alt={character.name} />\n      <button\n        type=\"button\"\n        className=\"character-mint-button\"\n        onClick={mintCharacterNFTAction(index)}\n      >{`Mint ${character.name}`}</button>\n    </div>\n  ));\n\n  // index.js\n  // SelectCharacter/index.js\n  return (\n    <div className=\"select-character-container\">\n      <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* mintingCharacter = trueの場合のみ、ローディングマークを表示します。*/}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default SelectCharacter;","/Users/SY/ETH-NFT-game/nft-game-starter-project/src/constants.js",[],"/Users/SY/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js",["33","34"],"// Arena/index.js\nimport LoadingIndicator from \"../LoadingIndicator\";\n// index.js\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\n// フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\n// Arena/index.js\n// NFT キャラクターの情報を更新するため、setCharacterNFT を引数として追加します。\n  const Arena = ({ characterNFT, setCharacterNFT }) => {\n  // コントラクトのデータを保有する状態変数を初期化します。\n  const [gameContract, setGameContract] = useState(null);\n  // Arena/index.js\n  // ボスのメタデータを保存する状態変数を初期化します。\n  const [boss, setBoss] = useState(null);\n\n  // 攻撃の状態を保存する変数を初期化します。\n  const [attackState, setAttackState] = useState(\"\");\n\n  // ボスを攻撃する関数を設定します。\n  const runAttackAction = async () => {\n    try {\n      // コントラクトが呼び出されたことを確認します。\n      if (gameContract) {\n        // attackState の状態を attacking に設定します。\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\");\n\n        // NFT キャラクターがボスを攻撃します。\n        const attackTxn = await gameContract.attackBoss();\n\n        // トランザクションがマイニングされるまで待ちます。\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn);\n\n        // attackState の状態を hit に設定します。\n        setAttackState(\"hit\");\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n\n  // Arena/index.js\n  // ページがロードされると下記が実行されます。\n  useEffect(() => {\n    // ボスのデータをコントラクトから読み込む関数を設定します。\n    const fetchBoss = async () => {\n      //ボスのメタデータをコントラクトをから呼び出します。\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn);\n      // ボスの状態を設定します。\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      // ボスの新しいHPを取得します。\n      const bossHp = newBossHp.toNumber();\n      // NFT キャラクターの新しいHPを取得します。\n      const playerHp = newPlayerHp.toNumber();\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      // NFT キャラクターとボスのHPを更新します。\n      setBoss((prevState) => {\n        return { ...prevState, hp: bossHp };\n      });\n      setCharacterNFT((prevState) => {\n        return { ...prevState, hp: playerHp };\n      });\n    };\n\n    // コントラクトが呼び出されていたら、下記を実行します。\n    if (gameContract) {\n      fetchBoss();\n      // リスナーの設定：ボスが攻撃された通知を受け取ります。\n      gameContract.on(\"AttackComplete\", onAttackComplete);\n    }\n\n    // コンポーネントがマウントされたら、リスナーを停止する。\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"AttackComplete\", onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n\n  // ページがロードされると下記が実行されます。\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n// Arena/index.js\n\n// Arena/index.js\nreturn (\n  <div className=\"arena-container\">\n    {/* ボスをレンダリングします */}\n    // Arena/index.js\n    {\n      boss && (\n        <div className=\"boss-container\">\n          {/* attackState 追加します */}\n          <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {/* Attack ボタンの下にローディングマークを追加します*/}\n          {attackState === \"attacking\" && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )\n    }\n    {/* NFT キャラクター をレンダリングします*/}\n    {characterNFT && (\n      <div className=\"players-container\">\n        <div className=\"player-container\">\n          <h2>Your Character</h2>\n          <div className=\"player\">\n            <div className=\"image-content\">\n              <h2>{characterNFT.name}</h2>\n              <img\n                src={characterNFT.imageURI}\n                alt={`Character ${characterNFT.name}`}\n              />\n              <div className=\"health-bar\">\n                <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n              </div>\n            </div>\n            <div className=\"stats\">\n              <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n            </div>\n          </div>\n        </div>\n      </div>\n    )}\n  </div>\n);\n};\nexport default Arena;","/Users/SY/ETH-NFT-game/nft-game-starter-project/src/Components/LoadingIndicator/index.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":14,"column":28,"nodeType":"41","messageId":"42","endLine":14,"endColumn":47},{"ruleId":"43","severity":1,"message":"44","line":99,"column":6,"nodeType":"45","endLine":99,"endColumn":20,"suggestions":"46"},{"ruleId":"43","severity":1,"message":"44","line":89,"column":6,"nodeType":"45","endLine":89,"endColumn":20,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":112,"column":25,"nodeType":"50","messageId":"51","endLine":114,"endColumn":5},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'setMintingCharacter' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCharacterNFT'. Either include it or remove the dependency array. If 'setCharacterNFT' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["54"],["55"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},{"desc":"56","fix":"58"},"Update the dependencies array to be: [gameContract, setCharacterNFT]",{"range":"59","text":"60"},{"range":"61","text":"60"},[3216,3230],"[gameContract, setCharacterNFT]",[2671,2685]]